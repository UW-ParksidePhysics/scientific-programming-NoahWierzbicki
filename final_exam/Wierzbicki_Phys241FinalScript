"""
This file brings together the rest of the files I have made and produces their results

"""


import os
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
from convert_units import convert_units
from read_two_columns_text import read_two_columns_text
from calculate_bivariate_statistics import calculate_bivariate_statistics
from calculate_quadratic_fit import calculate_quadratic_fit
from equations_of_state import fit_eos
from annotate_plot import annotate_plot
from generate_matrix import generate_matrix
from calculate_lowest_eigenvectors import calculate_lowest_eigenvectors

def parse_file_name(filepath):
  """ returns a string of 3 variables; chemical symbol, crystal symbol, denisty function """"
  filename = os.path.basename(filepath)
  if len(parts) < 4:
        raise ValueError("Filename does not contain enough data.")

  return parts[0], parts[1], parts[2]

def plot_data(data, eos_fit_curve, eos_parameters, chemical_symbol, crystal_symmetry_symbol, display_graph):
   volumes, energies = data

    fit_volumes = np.linspace(min(volumes), max(volumes), num=len(eos_fit_curve))
    volumes_angstrom = np.array([convert_units(volume, 'cubic_bohr_per_atom', 'cubic_angstroms_per_atom') for volume in volumes])
    fit_volumes_angstrom = np.array([convert_units(volume, 'cubic_bohr_per_atom', 'cubic_angstroms_per_atom') for volume in fit_volumes])
    energies_eV = np.array([convert_units(energy, 'rydberg_per_atom', 'electron_volts_per_atom') for energy in energies])
    eos_fit_curve_eV = np.array([convert_units(energy, 'rydberg_per_atom', 'electron_volts_per_atom') for energy in eos_fit_curve])

    fig, ax = plt.subplots()
    ax.scatter(volumes_angstrom, energies_eV, color='blue', marker='o', label='Data Points')
    ax.plot(fit_volumes_angstrom, eos_fit_curve_eV, 'k-', label='Fit Curve')

    x_buffer = 0.1 * (np.max(fit_volumes_angstrom) - np.min(fit_volumes_angstrom))
    y_buffer = 0.1 * (np.max(energies_eV) - np.min(energies_eV))
    ax.set_xlim([np.min(fit_volumes_angstrom) - x_buffer, np.max(fit_volumes_angstrom) + x_buffer])
    ax.set_ylim([np.min(energies_eV) - y_buffer, np.max(energies_eV) + y_buffer])

    ax.set_xlabel(r'$V$ ($\mathit{\AA}^3$/atom)', fontsize=12)
    ax.set_ylabel(r'$E$ (eV/atom)', fontsize=12)
    ax.set_title(f"Murnaghan Equation of States for {chemical_symbol} in DFT {crystal_symmetry_symbol}")

    annotate = {
        chemical_symbol: {'position': np.array([0.05, 0.95]), 'alignment': ['left', 'top'], 'fontsize': 12},
        crystal_symmetry_symbol: {'position': np.array([0.5, 0.9]), 'alignment': ['center', 'top'], 'fontsize': 12, 'style': 'italic'},
        f'K0 = {eos_parameters[1]:.1f} GPa': {'position': np.array([0.5, 0.85]), 'alignment': ['center', 'top'], 'fontsize': 12},
        f'Created by Noah, {datetime.now().date().isoformat()}': {'position': np.array([0.05, 0.01]), 'alignment': ['left', 'bottom'], 'fontsize': 12}
    }
    annotate_plot(annotate)

    ax.legend()
    ax.grid(True)

    if display_graph:
        plt.show()
    else:
        plt.savefig('Noah_Pt.Fm-3m.GGA-PBEsol.MurnaghanEquationsOfState.png')



def fit_state_equation(filename, display_graph=True):
    """
    plots results.

    """
    chemical_symbol, crystal_symmetry_symbol, density_functional_acronym = parse_file_name(filename)
    print(f"Processed file for: {chemical_symbol} in {crystal_symmetry_symbol} structure using {density_functional_acronym} approximation.")
    try:
        data = read_two_columns_text(filename)
    except OSError as e:
        print(e)
        return

    volumes = data[0]
    energies = data[1]
    statistics = calculate_bivariate_statistics(data)
    print(f"Statistics:\nMean of Y: {statistics[0]}\nStandard Deviation of Y: {statistics[1]}\nMin X: {statistics[2]}, Max X: {statistics[3]}\nMin Y: {statistics[4]}, Max Y: {statistics[5]}")
    quadratic_coefficients = calculate_quadratic_fit(data)
    print(f"Quadratic Coefficients: {quadratic_coefficients}")
    eos_fit_curve, eos_parameters = fit_eos(volumes, energies, quadratic_coefficients, eos='murnaghan', number_of_points=120)
    print(f"EOS Fit Curve: {eos_fit_curve}")
    print(f"EOS Parameters: {eos_parameters}")

    plot_data_and_fit(data, eos_fit_curve, eos_parameters, chemical_symbol, crystal_symmetry_symbol, display_graph)
